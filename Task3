import string

# Function to create the Playfair matrix
def generate_matrix(keyword):
    keyword = keyword.replace("J", "I")  # Replace 'J' with 'I' (Playfair rule)
    key_set = set()
    matrix = []

    # Remove duplicates and keep order
    for char in keyword:
        if char not in key_set and char in string.ascii_uppercase:
            key_set.add(char)
            matrix.append(char)

    # Add remaining letters of the alphabet (excluding 'J')
    for char in string.ascii_uppercase:
        if char not in key_set and char != "J":
            key_set.add(char)
            matrix.append(char)

    # Convert to 5x5 matrix
    return [matrix[i:i+5] for i in range(0, 25, 5)]

# Function to find the position of a letter in the matrix
def find_position(matrix, letter):
    for row in range(5):
        for col in range(5):
            if matrix[row][col] == letter:
                return row, col
    return None

# Function to process the text into pairs (adding 'X' if needed)
def prepare_text(text):
    text = text.replace("J", "I")  # Replace 'J' with 'I'
    text = "".join([c for c in text if c in string.ascii_uppercase])  # Remove non-letters
    pairs = []
    i = 0
    while i < len(text):
        if i == len(text) - 1:  # If last character has no pair, add 'X'
            pairs.append(text[i] + "X")
            i += 1
        elif text[i] == text[i + 1]:  # If pair has same letters, add 'X' between them
            pairs.append(text[i] + "X")
            i += 1
        else:
            pairs.append(text[i] + text[i + 1])
            i += 2
    return pairs

# Function to encrypt/decrypt using Playfair rules
def playfair_cipher(text, matrix, mode="encrypt"):
    pairs = prepare_text(text)
    result = ""

    for pair in pairs:
        row1, col1 = find_position(matrix, pair[0])
        row2, col2 = find_position(matrix, pair[1])

        if row1 == row2:  # Same row: move right (encrypt) or left (decrypt)
            if mode == "encrypt":
                result += matrix[row1][(col1 + 1) % 5] + matrix[row2][(col2 + 1) % 5]
            else:
                result += matrix[row1][(col1 - 1) % 5] + matrix[row2][(col2 - 1) % 5]
        elif col1 == col2:  # Same column: move down (encrypt) or up (decrypt)
            if mode == "encrypt":
                result += matrix[(row1 + 1) % 5][col1] + matrix[(row2 + 1) % 5][col2]
            else:
                result += matrix[(row1 - 1) % 5][col1] + matrix[(row2 - 1) % 5][col2]
        else:  # Rectangle swap
            result += matrix[row1][col2] + matrix[row2][col1]

    return result

# Main function
def main():
    keyword = input("Enter a keyword: ").upper()
    matrix = generate_matrix(keyword)

    # Display matrix
    print("\n")